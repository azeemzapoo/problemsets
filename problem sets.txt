digits of a number in same order;


#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"n: ";
    cin>>n;
    
    if(n<0){
        cout<<"invalid number";
    }
    
    int d = 1;
    
    while(n/d > 9){
        d = d * 10;
    }
    
    while(d > 0){
        int digit = n/d;
        cout<<digit<<" ";
        n = n % d;
        d = d / 10;    }
}



function solution



#include <iostream>

using namespace std;

void digits(int n);
void digits(int n){
    if(n < 0){
        cout<<"invalid number: ";
    }
    
    int d = 1;
    while(n/d > 9)
    {
        d = d * 10;
    }
    
    while(d > 0){
        int digit = n/d;
        cout<<digit<<" ";
        n = n % d;
        d = d / 10;
    }
}

int main()
{
    int n;
    cout<<"n: ";
    cin>>n;
    digits(n);
}



plandromic number solution with function;



#include <iostream>

using namespace std;
int plan (int n);
int plan (int n){
    int rev =0;
    int digit;
    while(n>0){
        digit = n % 10;
        rev = rev * 10 + digit;
        n = n / 10;
    }
    return rev;
}

int main()
{
    int n;
    cout<<"n: ";
    cin>>n;
    
    int num = n;
    
    int rev =0;
    int digit;

    if(num == rev){
        cout<<"this is plandromic";
    }
    else{
        cout<<"this is not plandromic";
    }
}



string plandromic with function

#include <iostream>
#include <string>

using namespace std;
bool plan(string myString);
bool plan(string myString){
    string temp;

    for (int i = myString.length()-1;i>=0; i--) {
        temp = temp + myString[i];
    }
    return temp == myString;
}
int main()
{
     string myString;
     cout<<"write: ";
     cin>>myString;
     

    if(plan(myString)){
        cout<<"this is plandromic";
    }
    else{
        cout<<"this is not plandromic";
    }
}



Find the factorial with recursive functions.*/



#include <iostream>

using namespace std;
int findfictorial (int n);
int findfictorial (int n){
    if(n == 1){
        return 1;
    }else{
        return n * findfictorial(n-1);
    }
}

int main()
{
    int n;
    cout<<"N: ";
    cin>>n;
    cout<<findfictorial(n)<<endl;

}






In C++ create only one function that will be used in two different scenarios: to calculate the area
of circle(PI*radius*radius) and area of square(length*width). Hint: Use function overloading*/

#include <iostream>

using namespace std;

// area of circle


float area(float a, float b){
    return a*b;
}


// area of square with function overloading
int area(int a, int b){
    return a*b;
}

int main()
{
    int a,b;
    int x,y;
    
    cout<<"a: ";
    cin>>a;
    cout<<"b: ";
    cin>>b;
    
    cout<<"x: ";
    cin>>x;
    cout<<"y: ";
    cin>>y;
    
    cout<<area(a,b)<<endl;
    cout<<area(x,y);
    
}


Bubble sort


#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }
    
    cout<<"orginal array: \n";
    for(int i = 0; i<n; i++){
        cout<<arr[i];
    }
    cout<<"\n";
    
    int temp;
    for(int j = 0; j<n; j++){
        for(int i = 0; i<n-1; i++){
            if (arr[i] < arr[i + 1]){ //for ascending and descending you just need to change the greater then sign.
                temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }
    }
    
    cout<<"sorted array: \n";
    for(int i = 0; i<n; i++){
        cout<<arr[i];
    }
}


count how many numbers are odd in array*/

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }
    int count = 0;
    for(int i = 0; i < n; i++){
        if (arr[i] % 2 == 1){
           count = count + 1; 
        }
    }
    cout<<"odd numbers: "<<count;
    
}



Find the maximum number in an array and find also the index of that number.*/

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }

    int max = 0;
    int index = 0;
    for(int i = 0; i < n; i++){
        if (arr[i] > max){
           max = arr[i]; 
           index = i;
        }
    }
    cout<<"max: "<<max <<" and index: "<< index;
    
}



Remove given element from the existing array if that element exists.*/

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }
    
    int rem;
    cout<<"write an element you want to remove : ";
    cin>>rem;
    
    int newsize = 0;
    for(int i = 0; i < n; i++){
        if (arr[i] != rem){
           arr[newsize] = arr[i];
           newsize++;
        }
    }
    cout<<"\n";
    cout<<"after: \n";
    for(int i = 0; i<newsize; i++){
        cout<<arr[i];
    }
}





Add an element to an existing array*/

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }
    
    
    int newsize = n + 1;
    
    
    int newarr[newsize];
    
    int new_element;
    cout<<"write an element you want to add : ";
    cin>>new_element;


    for(int i = 0; i<newsize; i++){
        newarr[i] = arr[i];
    }
    newarr[newsize-1] = new_element;
    
    cout<<"\n";
    cout<<"after: \n";
    for(int i = 0; i<newsize; i++){
        cout<<newarr[i];
    }
    
}




Given an integer array nums, return true if any value appears at least twice in the array, and
return false if every element is distinct.*/

#include <iostream>

using namespace std;

bool duplicate(int n, int arr[]);
bool duplicate(int n, int arr[]){
    for(int i= 0; i<n-1; i++){
        for(int j = i+1; j<n; j++){
            if(arr[i] == arr[j]){
                return true;
            }
        }
    }
    return false;
}

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i<n; i++){
        cout<<"element: ";
        cin>> arr[i];
    }
    
    if(duplicate(n,arr) == true){
        cout<<"found";
    }
    else{
        cout<<"not found";
    }
    
}




Define a function update (char a[], int n, char what, char with) that for a given char array -
sentence will update the sentence such that each character what will be replaced with the
character with. In the main program, read the sentence, update it and print the the updated
sentence ( use the function update()).i*/
*/

#include <iostream>

using namespace std;

int main(){
    string a;
    cout<<"write a sentence: ";
    getline(cin,a);
    
    char what,with;



    
    int n = a.length();
    char arr[n];
    
    for(int i = 0; i < n; i++){
        arr[i]=a[i];
    }
    
    cout<<"what do you want to replace: \n";
    cin>>what;
    cout<<"with: \n";
    cin>>with;
    
    
    for(int i = 0; i < n; i++){
        if(arr[i]==what){
            arr[i] = with;
        }
    }
    
    for(int i = 0; i<n; i++){
        cout<<arr[i];
    }
}




Write a C++ program to find maximum and minimum element in an array without and using recursion
we can solve this problem by sorting array first*/

#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"size of array: ";
    cin>>n;
    
    int arr[n];
    
    for(int i = 0; i < n; i++){
        cout<<"element: ";
        cin>>arr[i];
    }
    
    int max = 0;
    
    for(int j =0; j<n-1; j++){
        if(arr[j] > max){
            max = arr[j];
        }
    }
    
    int min = arr[0];
    for(int j =0; j<n-1; j++){
        if(min > arr[j + 1]){
            min = arr[j + 1];
        }
    }
    
    cout<<"max: "<<max<<"\n";
    cout<<"min: "<<min<<"\n";
 
    
}

